v1.size() = 10.  Should be 10.
Contents of v1 (multiples of 5): 0 5 10 15 20 25 30 35 40 45
Contents of v1 (still multiples of 5): 0 5 10 15 20 25 30 35 40 45
Contents of v2 (now palindrome): 0 5 10 15 20 20 15 10 5 0

After copying v2 to v3 and clearing v3,  v2.size() = 10 and v3.size() = 0
Contents of v2 (should be unchanged): 0 5 10 15 20 20 15 10 5 0

Now testing push_back.  Adding 3, 6, 9 to v2:
v2 is now: 
 0 5 10 15 20 20 15 10 5 0 3 6 9

Now testing resize.  Resizing v1 to have 20 elements and v2 to have 2 elements
v1 is now (should have 100s at the end): 
 0 5 10 15 20 25 30 35 40 45 100 100 100 100 100 100 100 100 100 100
v2 is now: 
 0 5

Starting from an empty vector, z,  of doubles and doing
5 push_backs
Contents of vector z:  3.16228 4.47214 5.47723 6.32456 7.07107

Make new test vector for removing matching elements
Vector contents:
  11 22 33 11 55 22 
Removed element 11; new size = 4
2 elements removed
Vector contents:
  22 33 55 22 

hi hello hey hi hello hey hi hello hey hi hello hey 
Removed element "hello"; new size = 8
4 elements removed
Vector contents:
  hi hey hi hey hi hey hi hey 

3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 3.141 1.1239 5.678 
Removed element 1.1239; new size = 20
10 elements removed
Vector contents:
  3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 3.141 5.678 


Vector Information:
   m_data: 0x78665574
   m_size: 30
  m_alloc: 32
Vector Contents:
wow, wo, w, wow, wo, w, wow, wo, w, wow, 
wo, w, wow, wo, w, wow, wo, w, wow, wo, 
w, wow, wo, w, wo, wo, w, wow, wo, w, 


Removed element "wo"; new size = 10
20 elements removed

Vector Information:
   m_data: 0x786654a4
   m_size: 10
  m_alloc: 16
Vector Contents:
w, w, w, w, w, w, w, w, w, w, 



test print()

Vector Information:
   m_data: 0x787641d0
   m_size: 4
  m_alloc: 8
Vector Contents:
22, 33, 55, 22


Vector Information:
   m_data: 0x0
   m_size: 0
  m_alloc: 0
Vector Contents:


Vector Information:
   m_data: 0x78870e00
   m_size: 100
  m_alloc: 128
Vector Contents:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 


Vector Information:
   m_data: 0x786655f0
   m_size: 50
  m_alloc: 64
Vector Contents:
50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 


Vector Information:
   m_data: 0x78665570
   m_size: 27
  m_alloc: 32
Vector Contents:
50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
60, 61, 62, 63, 83, 84, 85, 86, 87, 88, 
89, 90, 91, 92, 93, 94, 95


Vector Information:
   m_data: 0x78665434
   m_size: 1
  m_alloc: 1
Vector Contents:
ooph


Vector Information:
   m_data: 0x78665434
   m_size: 1
  m_alloc: 1
Vector Contents:
ooph


Vector Information:
   m_data: 0x78665444
   m_size: 0
  m_alloc: 0
Vector Contents:


Vector Information:
   m_data: 0x78665450
   m_size: 10
  m_alloc: 10
Vector Contents:
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 

